{"version":3,"sources":["InputFilter.js","App.js","index.js"],"names":["InputFilter","this","props","serverFilter","serverFilterHandleChange","onClickAdd","Row","Col","span","placeholder","value","onChange","type","onClick","React","Component","validateNum","input","min","max","num","toString","App","api_url","oldstate","JSON","parse","localStorage","getItem","token","filter","state","page","error","isLoaded","servers","filteredservers","tokenHandleChange","event","setState","server","ip","port","includes","changePage","bind","onClickDelete","orginial","arguments0","arguments","arguments1","setItem","stringify","columns","label","width","fixed","prop","align","render","row","column","index","e","serverString","parts","split","length","every","segment","validateIpAndPort","parseInt","isIncluded","forEach","item","Message","warning","requestOptions","method","headers","body","data","fetch","then","res","json","result","Code","success","push","_server","Data","map","text","fullscreen","theme","defaultActive","className","mode","Item","slice","serverStringData","border","layout","onCurrentChange","total","pageSize","currentPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.388dabfe.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Button, Input, Layout } from \"element-react\";\nimport \"element-theme-default\";\n\nclass InputFilter extends React.Component {\n    render() {\n        const {\n            serverFilter,\n            serverFilterHandleChange,\n            onClickAdd,\n        } = this.props;\n        return (\n            <div>\n                <Layout.Row>\n                    <Layout.Col span=\"6\">\n                        <Input\n                            placeholder=\"筛选或添加服务器\"\n                            value={serverFilter}\n                            onChange={serverFilterHandleChange}\n                        />\n                    </Layout.Col>\n                    <Layout.Col span=\"6\">\n                        <Button type=\"primary\" onClick={onClickAdd}>\n                            添加\n                        </Button>\n                    </Layout.Col>\n                </Layout.Row>\n            </div>\n        );\n    }\n}\n\nInputFilter.propTypes = {\n    serverFilter: PropTypes.string,\n    serverFilterHandleChange: PropTypes.func,\n    onClickAdd: PropTypes.func,\n};\n\nexport default InputFilter;\n","import React from \"react\";\nimport InputFilter from \"./InputFilter\";\n\nimport { Input, Message, Button, Table, Menu, Loading, Pagination } from \"element-react\";\nimport \"element-theme-default\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction validateIpAndPort(input) {\n    var parts = input.split(\":\");\n    var ip = parts[0].split(\".\");\n    var port = parts[1];\n    return (\n        validateNum(port, 1, 65535) &&\n        ip.length === 4 &&\n        ip.every(function (segment) {\n            return validateNum(segment, 0, 255);\n        })\n    );\n}\n\nfunction validateNum(input, min, max) {\n    var num = +input;\n    return num >= min && num <= max && input === num.toString();\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        // 国外服务器体验太差，先不管告警问题了\n        this.api_url = \"https://master.tw.actom.me/api/v1/server_list\"\n        // \"https://teeworld-master-cache.herokuapp.com/api/v1/server_list\";\n        // this.api_url = \"http://127.0.0.1:18080/api/v1/server_list\";\n        const initialState = {\n            token: \"\",\n            filter: \"\",\n        };\n\n        // 刷新保持state，但是只希望保持token和filter，\n        const oldstate = JSON.parse(localStorage.getItem(\"state\"))\n            ? JSON.parse(localStorage.getItem(\"state\"))\n            : initialState;\n\n        this.state = {\n            token: oldstate.token,\n            filter: oldstate.filter,\n            page: 1,\n            error: null,\n            isLoaded: false,\n            servers: [],\n            // 因为在element-ui的回调现在只知道可以通过index确定是那个服务器\n            filteredservers: [],\n        };\n\n        this.tokenHandleChange = (event) => {\n            this.setState({ token: event });\n        };\n        this.serverFilterHandleChange = (event) => {\n            const filteredservers = this.state.servers.filter((server) =>\n                (server.ip + \":\" + server.port).includes(event)\n            );\n            this.setState({ page:1, filter: event, filteredservers: filteredservers });\n        };\n        this.changePage = (event) => {\n            this.setState({ page: event })\n        }\n\n        this.onClickAdd.bind(this);\n        this.onClickDelete.bind(this);\n\n\n        // 刷新保持state\n        const orginial = this.setState;\n        this.setState = function () {\n            let arguments0 = arguments[0];\n            let arguments1 = () => (\n                arguments[1], localStorage.setItem(\"state\", JSON.stringify(this.state))\n            );\n            orginial.bind(this)(arguments0, arguments1);\n        };\n\n        this.columns = [\n            {\n                label: \"服务器地址\",\n                width: 250,\n                fixed: \"left\",\n                prop: \"serverStringData\",\n                align: \"center\",\n            },\n            {\n                label: \"操作\",\n                width: 120,\n                align: \"center\",\n                render: (row, column, index) => {\n                    return (\n                        <span>\n                            <Button\n                                type=\"primary\"\n                                onClick={(e) =>\n                                    this.onClickDelete(\n                                        this.state.filteredservers[index],\n                                        e\n                                    )\n                                }\n                            >\n                                移除\n                            </Button>\n                        </span>\n                    );\n                },\n            },\n        ];\n    }\n\n    onClickAdd(serverString) {\n        if (!validateIpAndPort(serverString)) {\n            Message.error(\"服务器地址格式错误\");\n            return;\n        }\n        const server = {\n            ip: serverString.split(\":\")[0],\n            port: parseInt(serverString.split(\":\")[1]),\n        };\n\n        var isIncluded = false;\n        this.state.servers.forEach(function (item) {\n            if (item.ip === server.ip && item.port === server.port) {\n                isIncluded = true;\n            }\n        });\n        if (isIncluded) {\n            Message.warning(\"此服务器已经在列表中\");\n            return;\n        }\n        const requestOptions = {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                token: this.state.token,\n                data: server,\n            }),\n        };\n        fetch(this.api_url, requestOptions)\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    if (result.Code === 0) {\n                        Message.success(\"添加成功\");\n                        this.state.servers.push(server);\n                        const filteredservers = this.state.servers.filter(\n                            (server) =>\n                                (server.ip + \":\" + server.port).includes(\n                                    this.state.filter\n                                )\n                        );\n                        this.setState({\n                            servers: this.state.servers,\n                            filteredservers: filteredservers,\n                        });\n                    } else {\n                        Message.error(\"返回错误：\" + result.Message);\n                    }\n                },\n                (error) => {\n                    Message.error(\"请求失败：\" + error);\n                }\n            );\n    }\n\n    onClickDelete(server) {\n        const requestOptions = {\n            method: \"DELETE\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                token: this.state.token,\n                data: {\n                    ip: server.ip,\n                    port: parseInt(server.port),\n                },\n            }),\n        };\n        fetch(this.api_url, requestOptions)\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    if (result.Code === 0) {\n                        Message.success(\"删除成功\");\n                        const servers = this.state.servers.filter(\n                            (_server) => server !== _server\n                        );\n                        const filteredservers = servers.filter((server) =>\n                            (server.ip + \":\" + server.port).includes(\n                                this.state.filter\n                            )\n                        );\n                        this.setState({\n                            servers: servers,\n                            filteredservers: filteredservers,\n                        });\n                    } else {\n                        Message.error(\"返回错误：\" + result.Message);\n                    }\n                },\n                (error) => {\n                    Message.error(\"请求失败：\" + error);\n                }\n            );\n    }\n\n    componentDidMount() {\n        fetch(this.api_url)\n            .then((res) => res.json())\n            .then(\n                (result) => {\n                    const servers = result.Data.map((server) => ({\n                        ip: server.ip,\n                        port: server.port,\n                    }));\n                    const filteredservers = servers.filter((server) =>\n                        (server.ip + \":\" + server.port).includes(\n                            this.state.filter\n                        )\n                    );\n                    this.setState({\n                        isLoaded: true,\n                        servers: servers,\n                        filteredservers: filteredservers,\n                    });\n                    Message.success(\"共获取\" + servers.length + \"条服务器信息\");\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error,\n                    });\n                }\n            );\n    }\n\n    render() {\n        const { token, filter, error, isLoaded, filteredservers } = this.state;\n        if (error) {\n            return <Loading text=\"加载错误，请刷新\" fullscreen={true} />;\n        } else {\n            return (\n                <div>\n                    {!isLoaded && (\n                        <Loading text=\"拼命加载中\" fullscreen={true} />\n                    )}\n                    <div>\n                        <Menu\n                            theme=\"dark\"\n                            defaultActive=\"1\"\n                            className=\"el-menu-demo\"\n                            mode=\"horizontal\"\n                        >\n                            <Menu.Item index=\"1\">TeeMaster 控制中心</Menu.Item>\n                        </Menu>\n                    </div>\n                    <Input\n                        placeholder=\"增减记录需要输入token\"\n                        value={token}\n                        onChange={this.tokenHandleChange}\n                    />\n                    <InputFilter\n                        serverFilter={filter}\n                        serverFilterHandleChange={this.serverFilterHandleChange}\n                        onClickAdd={(e) => this.onClickAdd(filter, e)}\n                    />\n                    <Table\n                        columns={this.columns}\n                        data={filteredservers.slice((this.state.page-1)*50,this.state.page*50).map((server) => ({\n                            serverStringData: server.ip + \":\" + server.port,\n                        }))}\n                        border={true}\n                    />\n                    <div className=\"block\">\n                        <Pagination layout=\"total, prev, pager, next, jumper\" onCurrentChange={this.changePage} total={this.state.filteredservers.length} pageSize={50} currentPage={1} />\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}